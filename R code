library(jsonlite)
setwd("C:\\Users\\pp\\Downloads\\yelp\\yelp_dataset_challenge_academic_dataset")

#############################################################################################################
business <- stream_in(file("yelp_academic_dataset_business.json"))
save(business, file="yelp_business.Rda")
flat_business <- flatten(business)
sh_busi <- flat_business[,c(1:13)] 

count <- c()
for (m in unique(sh_busi$state)) {count <- c(count, sum(sh_busi$state==m))} # AZ (Phoenix), NV (Las Vegas)

LV_busi <- sh_busi[which(sh_busi$city=="LAS VEGAS" | sh_busi$city=="Las Vegas"),]   # 13602  *  13
unique(LV_busi$categories)
LV_restau <- LV_busi[grepl("Restaurants", LV_busi$categories),]     # 4119  *  13
sh_LV_restau <- LV_restau[, c(1,6,9,11,12)]    # FINAL

#LV_food <- LV_busi[grepl("Food", LV_busi$categories),]        # 2096 *  13
############################################################
review <- stream_in(file("yelp_academic_dataset_review.json"))
save(review, file="yelp_review.Rda")
#temp <- load("yelp_review.Rda")
flat_review <- flatten(review)
sh_review <- flat_review[,c(1,2,3,4,7)]
years <- year(as.POSIXlt(sh_review$date))
review2015 <- sh_review [years=="2015",]

review_bId <- unique(review2015$business_id) 
bbId <- unique(sh_LV_restau$business_id)
review_count2015 <- c()
stars2015 <- c()
for (n in bbId)
{ 
  indices <- which(review2015$business_id == n)
  review_count2015 <- c(review_count2015, length(indices))
  stars2015 <- c(stars2015, mean(review2015[indices,]$stars))
}
new_review <- cbind.data.frame(bbId, review_count2015)
new_review <- cbind.data.frame(new_review, stars2015)     # 4119 * 3

busi_review <- cbind.data.frame(new_review[order(new_review[,1]),],  
sh_LV_restau[order(sh_LV_restau[,1]),]  )
busi_review2 <- busi_review[which(busi_review$review_count2015 != 0),]

##***********************************************
install.packages("ks")
library(ks)

pos <- busi_review2[,c(6,8)]
Hpi1 <- Hpi(x = pos, binned=TRUE, nstage=2, pilot = "unconstr", pre = "scale")
KD <- kde(x = pos, H = Hpi1)
DE <- predict(KD, x = pos)
plot(KD)

busi_review3 <- cbind.data.frame(busi_review2, DE)
busi_review3$eval <- round(log(busi_review3[,2]+1) * busi_review3[,3] * busi_review3$DE)
#meanEval <- mean(busi_review3$eval)
#rangeEval <- max(busi_review3$eval)-min(busi_review3$eval)
#busi_review3$Scaled_eval <- round(10 * (busi_review3$eval - meanEval)/rangeEval) 
plotData <- busi_review3[,c(6,8,9)]
fullData <- busi_review3[,c(2,3,5,6,7,8,9,10)]
write.csv(file="data_for_plot.csv", x=plotData)
write.csv(file="full_data_for_plot.csv", x=fullData)

txt_temp <- c()
for (i in 1:nrow(plotData))
{  txt_temp <- c(txt_temp, 
                paste(sep="", "{lat:", plotData[i, 2], ", lng:", plotData[i,1], 
                      ", count:", plotData[i,3], "}", ",") )
}

heatmap_data <- txt_temp[1]
for (j in 2:nrow(plotData))
{
  heatmap_data <- paste(heatmap_data, txt_temp[j], sep="")
}

write(heatmap_data, file="heatmap_data.txt")
##############################################################################################
user <- stream_in(file("yelp_academic_dataset_user.json"))
save(user, file="yelp_user.Rda")
temp <- user$elite
elite_col <- matrix(0.01,nrow=nrow(user),ncol=1)
for (i in 1:nrow(user))
{ if (length(temp[[i]]) !=0)
  {elite_col[i,1] <- length(temp[[i]])}
}

temp2 <- user$friends
friends_col <- matrix(0.01,nrow=nrow(user),ncol=1)
for (i in 1:nrow(user))
{ if (length(temp2[[i]]) !=0)
{friends_col[i,1] <- length(temp2[[i]])}
}
mod_user <- user[,-c(6,11)]
mod_user$friends <- friends_col
mod_user$elite <- elite_col
flat_user <- flatten(mod_user)

bid_star <- sh_busi[,c(1,11)]
bid_uid <- flat_review[,c(1,3,7)]
# uid <- flat_user[,c(4,7)]
#tmp <- cbind.data.frame(sort(bid_uid[,2]), sort(bid_star[,1]))

uniq_bid <- unique(bid_star$business_id)
bstar <- matrix(ncol=1, nrow=nrow(bid_uid))
for (n in uniq_bid)
  {
  indices <- which(bid_uid$business_id == n)
  star_tmp <- bid_star[which(bid_star$business_id == n),]$stars
  bstar[indices,] <- star_tmp
  }

bid_uid <- cbind.data.frame(bid_uid, bstar)
bid_uid$star_diff <- abs(bid_uid$stars - bid_uid$bstar)

quantile(flat_user$review_count)
sub_user <- subset(flat_user, review_count >= 5)
uniq_uid_5bigger <- unique(sub_user$user_id)

#uniq_uid <- unique(bid_uid$user_id)
#final_uiq_uid <- uniq_uid[uniq_uid==uniq_uid_5bigger]

#set.seed(1033)
#rand <- sample (c(1:length(uniq_uid)), 400)
#sub_uniq_uid <- uniq_uid[rand]

bid_uid$mean_diff <- NA
for (n in uniq_uid_5bigger)
{ indices <- which(bid_uid$user_id == n)
  bid_uid$mean_diff[indices] = mean(bid_uid[indices,]$star_diff)
  print(which(uniq_uid_5bigger==n))
}

bid_uid_keep1 <- bid_uid
write.csv(bid_uid_keep1, file="bid_uid_keep1.csv")
bid_uid_keep2 <- bid_uid[!is.na(bid_uid$mean_diff),]
hist(bid_uid_keep2$mean_diff)
bid_uid_keep2$label <- ifelse(bid_uid_keep2$mean_diff < 0.8, 1, 0)
tmp <- bid_uid_keep2[,-c(2:5)]
bid_uid_keep3 <- tmp[!duplicated(tmp),]

#  temp_flat_user <- c()
#  for (n in sub_uniq_uid)
#  { indices <- which(flat_user$user_id == n)
#    temp_flat_user <- rbind.data.frame(temp_flat_user, flat_user[indices,])      
#  }

user_new <- cbind.data.frame(bid_uid_keep3[order(bid_uid_keep3[,1]),], 
                             sub_user[order(sub_user[,4]),])
user_logitReg <- user_new[,c(3,5,8,9,11,12,13,14,15)]
scaled_data <- as.data.frame(scale(user_logitReg[,-1])) 
scaled_data$label <- user_logitReg[,1]

glm_fit <- glm(label~elite+average_stars , data = scaled_data, family = "binomial")
summary(glm_fit)

#####################
## unscaled data
#####################
#Deviance Residuals: 
#  Min       1Q   Median       3Q      Max  
#-3.8948  -1.0532  -0.8474   1.2556   3.4795  

#Coefficients:
#                 Estimate Std. Error z value Pr(>|z|)    
#(Intercept)   -2.470e+00  3.005e-02 -82.191  < 2e-16 ***
#  review_count   2.172e-03  9.244e-05  23.494  < 2e-16 ***
#  fans          -5.961e-04  6.702e-04  -0.889  0.37377    
#average_stars  5.404e-01  7.751e-03  69.718  < 2e-16 ***
#  friends        3.638e-04  1.330e-04   2.736  0.00623 ** 
#  elite          9.964e-02  5.673e-03  17.563  < 2e-16 ***
#  votes.funny   -4.230e-04  6.728e-05  -6.287 3.23e-10 ***
#  votes.useful  -8.334e-04  8.687e-05  -9.593  < 2e-16 ***
#  votes.cool     1.177e-03  1.198e-04   9.828  < 2e-16 ***

#Null deviance: 291820  on 214125  degrees of freedom
#Residual deviance: 283128  on 214117  degrees of freedom
#########################################

# scaled data
########################################
#Coefficients:
#  Estimate Std. Error z value Pr(>|z|)    
#(Intercept)   -0.318616   0.004478 -71.146  < 2e-16 ***
#  review_count   0.259670   0.011053  23.494  < 2e-16 ***
# fans          -0.008976   0.010091  -0.889  0.37377    
#average_stars  0.332558   0.004770  69.718  < 2e-16 ***
#  friends        0.018755   0.006856   2.736  0.00623 ** 
#  elite          0.120886   0.006883  17.563  < 2e-16 ***
#  votes.funny   -0.167055   0.026571  -6.287 3.23e-10 ***
#  votes.useful  -0.438617   0.045722  -9.593  < 2e-16 ***
#  votes.cool     0.514923   0.052395   9.828  < 2e-16 ***
################################################
install.packages("arm")
library(arm)
coefplot(glm_fit, xlim=c(-1, 1))
